{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nmotor_1 = Motor(Ports.PORT1, False)\nmotor_2 = Motor(Ports.PORT2, False)\nmotor_3 = Motor(Ports.PORT3, False)\nmotor_4 = Motor(Ports.PORT4, False)\n\n\n\n# generating and setting random seed\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    systemTime = brain.timer.system() * 100\n    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) \n    \n# Initialize random seed \ninitializeRandomSeed()\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n# \tAuthor:       VEX\n# \tCreated:\n# \tDescription:  VEXcode IQ Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\nimport sys\n\n\ndef rad_to_deg(rad):\n    return (rad/math.pi)*180\n\n\ndef deg_to_rad(deg):\n    return (deg/180)*math.pi\n\n\ndef car_to_pol(x, y):\n    d = math.sqrt(x**2+y**2)\n    a = math.atan2(x, y)\n    return d, rad_to_deg(a)\n\n\ndef spin_motors(d, a, b):\n    motor_1.set_velocity(d*math.cos(deg_to_rad(a-45)) + b)\n    motor_1.spin(FORWARD)\n    motor_2.set_velocity(d*math.cos(deg_to_rad(a-135)) + b)\n    motor_2.spin(FORWARD)\n    motor_3.set_velocity(d*math.cos(deg_to_rad(a+135)) + b)\n    motor_3.spin(FORWARD)\n    motor_4.set_velocity(d*math.cos(deg_to_rad(a+45)) + b)\n    motor_4.spin(FORWARD)\n# this function turns the amount of degrees you want it to \n# c is the rotation you want to turn to\n\n\ndef turn(c):\n    inertial.set_rotation(0, DEGREES)\n    while abs(inertial.rotation) < abs(c)\n        spin_motors(0, 0, 100)\n\ndef check_data():\n    while True:\n        wait(10,MSEC)\n        if brain.timer.time(MSEC)>1000:\n            spin_motors(0,0,100 if c>0 else -100))\n\nt=Thread(check_data)\n\nwhile True:\n    try:\n        data = sys.stdin.readline()\n        brain.timer.clear()\n        data = data.split(',')\n        if data[0] == 't':\n            c = int(data[1])\n            turn(c)\n        elif data[0] == 'm':\n            d = int(data[1])\n            a = int(data[2])\n            spin_motors(d, a, 0)\n        \n        # error_angle = a - brain_inertial.heading()\n        # a = 2 * error_angle\n        \n        # brain.screen.clear_screen()\n        # brain.screen.set_cursor(1,1)\n        # brain.screen.print(d, a)\n    except:\n        pass\n","textLanguage":"python","robotConfig":[{"port":[1],"name":"motor_1","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[2],"name":"motor_2","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[3],"name":"motor_3","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[4],"name":"motor_4","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":5,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false}